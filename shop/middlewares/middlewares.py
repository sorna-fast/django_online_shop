# 🎯 Middleware در Django مثل نگهبان‌هایی هستن که دم در ایستادن!

# هر بار که کاربر یه درخواست (request) می‌فرسته به سایت، این درخواست باید از جلوی این نگهبان‌ها رد بشه.
# هر نگهبان (یا همون middleware) می‌تونه کاری انجام بده، مثلاً:

#     کارت شناسایی رو چک کنه (آیا لاگین کرده یا نه؟)

#     درخواست رو ثبت کنه (برای لاگ یا آمار گرفتن)

#     درخواست رو رد کنه یا تغییرش بده

#     قبل از اینکه پاسخ به کاربر برگرده، آخرین بررسی‌ها رو انجام بده


# ----------------------------------------------------------------------------------------------------------------------

# هر جی میدلور بخوام اینجا مینویسم

# ----------------------------------------------------------------------------------------------------------------------

# اگه بخوام از رکوئست در مدل هام استفاده کنم

# ----------------------------------------------------------------------------------------------------------------------

# Middleware : ها مثل فیلترهایی هستن که قبل از رسیدن درخواست به view و قبل از برگشتن پاسخ به کاربر، روش کار می‌کنن.

# ----------------------------------------------------------------------------------------------------------------------

# 🧵 threading چیه؟

# Django (و خیلی از برنامه‌های دیگه) می‌تونه چند درخواست رو همزمان مدیریت کنه.
# برای اینکه این اتفاق بیفته، سیستم از Thread استفاده می‌کنه؛
# یعنی:
# هر کاربر که یه صفحه رو باز می‌کنه، مثل اینه که یه خط مجزای اجرا (یه نخ یا Thread) مخصوص خودش می‌گیره.
    
# ----------------------------------------------------------------------------------------------------------------------

# 🧠 حالا threading.local() چیه؟

# ایمپورت کردن ماژول threading برای اینکه بتونیم یه فضای اختصاصی برای هر درخواست بسازیم.
# این یه فضای مخصوص حافظه برای هر Thread هست.
# یعنی چی؟ 🤔
# فرض کن کاربر A داره وارد سایت میشه و همزمان کاربر B هم داره وارد میشه.
# هرکدوم درخواست خودش رو دارن. ما نمی‌خوایم اطلاعات کاربر A اشتباهی به کاربر B نشون داده بشه!
# اینجا threading.local() به ما کمک می‌کنه که بگیم:
# "این متغیر فقط مخصوص همین کاربر و همین درخواست باشه."
    
# ----------------------------------------------------------------------------------------------------------------------

# وقتی Django این middleware رو لود می‌کنه:
#     get_response یه تابع هست که مسئول رسیدگی به درخواست بعدی در زنجیره‌ی middleware هاست.
#     self.thread_local یه متغیر مخصوص نگهداری request فعلیه. ولی به صورت اختصاصی برای هر درخواست جدا.

# ----------------------------------------------------------------------------------------------------------------------

# self.thread_local.current_request = request
# یعنی: "بذار این درخواست رو به طور اختصاصی برای این thread (کاربر) ذخیره کنم."

# ----------------------------------------------------------------------------------------------------------------------

# این کد یه middleware می‌سازه که درخواست (request) کاربر رو به صورت اختصاصی و امن برای اون کاربر (thread) نگه می‌داره، تا بعداً از هرجای دیگه‌ای بشه بهش دسترسی داشت، بدون اینکه قاطی درخواست کاربر دیگه بشه.

# ----------------------------------------------------------------------------------------------------------------------


import threading

class RequestMiddleware:
    def __init__(self, get_response, thread_local=threading.local()):
        self.get_response = get_response
        self.thread_local = thread_local
        
    def __call__(self, request):
        self.thread_local.current_request = request
        response = self.get_response(request)
        return response